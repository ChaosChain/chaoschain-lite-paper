openapi: 3.0.3
info:
  title: ChaosChain Identity Module API
  description: |
    The Identity Module API provides secure key management and signature operations for ChaosChain agents.
    
    This API allows agents to:
    - Generate and use cryptographic key pairs without direct access to private keys
    - Create signatures using their securely stored private keys
    - Access their own historical public keys for identity continuity during key rotation
    - Store and retrieve external public keys for signature verification
  version: 1.0.0
  contact:
    name: ChaosChain Support
    url: https://docs.chaoschain.org
servers:
  - url: https://localhost:8443/api/v1
    description: Local development server
  - url: https://node.chaoschain.org/api/v1
    description: Production server
security:
  - ApiKeyAuth: []
paths:
  /identity/keys:
    post:
      summary: Generate Key Pair
      description: Generates a new key pair for the agent, with the private key securely stored in the Identity Module.
      operationId: generateKeyPair
      tags:
        - Key Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateKeyPairRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateKeyPairResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: List Known Keys
      description: Lists all stored public keys with optional filtering.
      operationId: listKnownKeys
      tags:
        - Key Management
      parameters:
        - name: keyType
          in: query
          description: Filter by key type
          required: false
          schema:
            type: string
        - name: role
          in: query
          description: Filter by role metadata
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of results to return
          required: false
          schema:
            type: integer
            default: 20
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListKeysResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /identity/keys/rotate:
    post:
      summary: Rotate Key
      description: Generates a new key pair and sets it as the agent's primary key, while recording the previous key in the historical key registry.
      operationId: rotateKey
      tags:
        - Key Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RotateKeyRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RotateKeyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /identity/keys/external:
    post:
      summary: Register Public Key
      description: Registers an external public key in the local registry for later use in signature verification.
      operationId: registerPublicKey
      tags:
        - Key Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPublicKeyRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterPublicKeyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /identity/keys/{keyId}:
    get:
      summary: Get Public Key
      description: Retrieves a public key by ID.
      operationId: getPublicKey
      tags:
        - Key Management
      parameters:
        - name: keyId
          in: path
          description: The ID of the key to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPublicKeyResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /identity/keys/owner/{ownerId}:
    get:
      summary: Get Public Key by Owner
      description: Retrieves a public key by owner ID.
      operationId: getPublicKeyByOwner
      tags:
        - Key Management
      parameters:
        - name: ownerId
          in: path
          description: The ID of the owner
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPublicKeyResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /identity/keys/historical:
    get:
      summary: Get Historical Public Keys
      description: Retrieves historical public keys for the requesting agent.
      operationId: getHistoricalPublicKeys
      tags:
        - Key Management
      parameters:
        - name: keyType
          in: query
          description: Filter by key type
          required: false
          schema:
            type: string
        - name: timestampStart
          in: query
          description: Start timestamp (Unix time)
          required: false
          schema:
            type: integer
            format: int64
        - name: timestampEnd
          in: query
          description: End timestamp (Unix time)
          required: false
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Maximum number of results to return
          required: false
          schema:
            type: integer
            default: 20
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetHistoricalPublicKeysResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /identity/signatures:
    post:
      summary: Request Signature
      description: Requests a signature for a specific message using the agent's private key.
      operationId: requestSignature
      tags:
        - Signature Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestSignatureRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestSignatureResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /identity/signatures/verify:
    post:
      summary: Verify Signature
      description: Verifies a signature against a message and public key.
      operationId: verifySignature
      tags:
        - Signature Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifySignatureRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifySignatureResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /identity/signatures/verify-aggregated:
    post:
      summary: Verify Aggregated Signature
      description: Verifies an aggregated BLS signature against multiple messages and public keys.
      operationId: verifyAggregatedSignature
      tags:
        - Signature Operations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyAggregatedSignatureRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyAggregatedSignatureResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    ResponseEnvelope:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
        data:
          type: object
          description: Response data when successful
        error:
          $ref: '#/components/schemas/Error'
          description: Error information when not successful
        requestId:
          type: string
          description: Unique ID for the request
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
          enum:
            - ERROR_UNSPECIFIED
            - ERROR_INVALID_KEY
            - ERROR_KEY_NOT_FOUND
            - ERROR_SIGNATURE_VERIFICATION_FAILED
            - ERROR_PERMISSION_DENIED
            - ERROR_RATE_LIMIT_EXCEEDED
            - ERROR_INVALID_REQUEST
            - ERROR_INTERNAL
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details
    GenerateKeyPairRequest:
      type: object
      required:
        - keyType
      properties:
        keyType:
          type: string
          description: The type of key to generate (e.g., "bls12-381", "ed25519")
          example: ed25519
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Optional metadata (e.g., role, permissions)
          example:
            role: validator
            environment: production
        setAsPrimary:
          type: boolean
          description: Whether to set this as the primary key
          default: true
          example: true
    GenerateKeyPairResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseEnvelope'
        - type: object
          properties:
            data:
              type: object
              properties:
                keyId:
                  type: string
                  description: The assigned key ID for the newly generated key
                  example: key-abc123
                publicKey:
                  type: string
                  description: The generated public key (base64 encoded)
                  example: base64-encoded-public-key
                keyType:
                  type: string
                  description: The type of key generated
                  example: ed25519
    RotateKeyRequest:
      type: object
      required:
        - keyType
      properties:
        keyType:
          type: string
          description: The type of key to generate (e.g., "bls12-381", "ed25519")
          example: ed25519
        currentKeyId:
          type: string
          description: The key ID of the key being rotated out (optional, uses current primary if not specified)
          example: key-abc123
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Optional metadata for the new key
          example:
            role: validator
            environment: production
        reason:
          type: string
          description: Reason for rotation (e.g., "scheduled", "security", "policy")
          example: scheduled
    RotateKeyResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseEnvelope'
        - type: object
          properties:
            data:
              type: object
              properties:
                newKeyId:
                  type: string
                  description: The ID of the newly generated key
                  example: key-def456
                newPublicKey:
                  type: string
                  description: The public key of the newly generated key (base64 encoded)
                  example: base64-encoded-public-key
                previousKeyId:
                  type: string
                  description: The ID of the key that was rotated out
                  example: key-abc123
                rotationTimestamp:
                  type: integer
                  format: int64
                  description: When the rotation occurred (Unix time)
                  example: 1634567890
    RegisterPublicKeyRequest:
      type: object
      required:
        - publicKey
        - keyType
      properties:
        keyId:
          type: string
          description: Optional identifier for the key
          example: external-key-123
        publicKey:
          type: string
          description: The public key to register (base64 encoded)
          example: base64-encoded-public-key
        keyType:
          type: string
          description: The type of the key (e.g., "bls12-381", "ed25519")
          example: ed25519
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Optional metadata (e.g., role, purpose)
          example:
            owner: validator-xyz
            purpose: message-verification
    RegisterPublicKeyResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseEnvelope'
        - type: object
          properties:
            data:
              type: object
              properties:
                keyId:
                  type: string
                  description: The assigned key ID
                  example: external-key-123
    GetPublicKeyResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseEnvelope'
        - type: object
          properties:
            data:
              type: object
              properties:
                keyId:
                  type: string
                  description: The key ID
                  example: key-abc123
                publicKey:
                  type: string
                  description: The public key (base64 encoded)
                  example: base64-encoded-public-key
                keyType:
                  type: string
                  description: The type of key
                  example: ed25519
                metadata:
                  type: object
                  additionalProperties:
                    type: string
                  description: Key metadata
                  example:
                    role: validator
                    environment: production
    ListKeysResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseEnvelope'
        - type: object
          properties:
            data:
              type: object
              properties:
                keys:
                  type: array
                  items:
                    $ref: '#/components/schemas/PublicKeyInfo'
                pagination:
                  $ref: '#/components/schemas/Pagination'
    PublicKeyInfo:
      type: object
      properties:
        keyId:
          type: string
          description: The key ID
          example: key-abc123
        publicKey:
          type: string
          description: The public key (base64 encoded)
          example: base64-encoded-public-key
        keyType:
          type: string
          description: The type of key
          example: ed25519
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Key metadata
          example:
            role: validator
            environment: production
        ownerId:
          type: string
          description: The ID of the key owner
          example: agent-123
        registrationTimestamp:
          type: integer
          format: int64
          description: When the key was registered (Unix time)
          example: 1624567890
    GetHistoricalPublicKeysResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseEnvelope'
        - type: object
          properties:
            data:
              type: object
              properties:
                keys:
                  type: array
                  items:
                    $ref: '#/components/schemas/HistoricalPublicKeyInfo'
                pagination:
                  $ref: '#/components/schemas/Pagination'
    HistoricalPublicKeyInfo:
      type: object
      properties:
        keyId:
          type: string
          description: The key ID
          example: key-abc123
        publicKey:
          type: string
          description: The public key (base64 encoded)
          example: base64-encoded-public-key
        keyType:
          type: string
          description: The type of key
          example: ed25519
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Key metadata
          example:
            role: validator
        createdAt:
          type: integer
          format: int64
          description: When the key was created (Unix time)
          example: 1624567890
        retiredAt:
          type: integer
          format: int64
          nullable: true
          description: When the key was retired (Unix time), if applicable
          example: 1634567890
        status:
          type: string
          description: Key status
          enum:
            - active
            - retired
            - revoked
            - rotating
          example: retired
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        totalPages:
          type: integer
          description: Total number of pages
          example: 1
        nextPage:
          type: integer
          nullable: true
          description: Next page number, null if no more pages
          example: null
    RequestSignatureRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: The message to sign (base64 encoded)
          example: base64-encoded-message
        keyId:
          type: string
          description: The key ID to use for signing (optional, defaults to primary key)
          example: key-abc123
        signatureScheme:
          type: string
          description: The signature scheme to use (e.g., "bls", "eddsa")
          example: eddsa
    RequestSignatureResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseEnvelope'
        - type: object
          properties:
            data:
              type: object
              properties:
                signature:
                  type: string
                  description: The generated signature (base64 encoded)
                  example: base64-encoded-signature
    VerifySignatureRequest:
      type: object
      required:
        - message
        - signature
      properties:
        message:
          type: string
          description: The message that was signed (base64 encoded)
          example: base64-encoded-message
        signature:
          type: string
          description: The signature to verify (base64 encoded)
          example: base64-encoded-signature
        publicKey:
          type: string
          description: The public key to use for verification (base64 encoded, optional if keyId is provided)
          example: base64-encoded-public-key
        keyId:
          type: string
          description: The key ID to use for verification (optional if publicKey is provided)
          example: key-abc123
        signatureScheme:
          type: string
          description: The signature scheme used (e.g., "bls", "eddsa")
          example: eddsa
    VerifySignatureResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseEnvelope'
        - type: object
          properties:
            data:
              type: object
              properties:
                valid:
                  type: boolean
                  description: Whether the signature is valid
                  example: true
    VerifyAggregatedSignatureRequest:
      type: object
      required:
        - messages
        - publicKeys
        - aggregatedSignature
      properties:
        messages:
          type: array
          items:
            type: string
          description: The messages that were signed (base64 encoded)
          example:
            - base64-encoded-message-1
            - base64-encoded-message-2
            - base64-encoded-message-3
        publicKeys:
          type: array
          items:
            type: string
          description: The public keys to use for verification (base64 encoded)
          example:
            - base64-encoded-public-key-1
            - base64-encoded-public-key-2
            - base64-encoded-public-key-3
        aggregatedSignature:
          type: string
          description: The aggregated signature to verify (base64 encoded)
          example: base64-encoded-aggregated-signature
    VerifyAggregatedSignatureResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseEnvelope'
        - type: object
          properties:
            data:
              type: object
              properties:
                valid:
                  type: boolean
                  description: Whether the signature is valid
                  example: true
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ResponseEnvelope'
              - type: object
                properties:
                  success:
                    example: false
                  error:
                    example:
                      code: ERROR_INVALID_REQUEST
                      message: The request is invalid
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ResponseEnvelope'
              - type: object
                properties:
                  success:
                    example: false
                  error:
                    example:
                      code: ERROR_PERMISSION_DENIED
                      message: The caller does not have permission
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ResponseEnvelope'
              - type: object
                properties:
                  success:
                    example: false
                  error:
                    example:
                      code: ERROR_KEY_NOT_FOUND
                      message: The requested key could not be found
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ResponseEnvelope'
              - type: object
                properties:
                  success:
                    example: false
                  error:
                    example:
                      code: ERROR_INTERNAL
                      message: An internal error occurred 